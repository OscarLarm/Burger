5/9 What we started with was deciding our git terminal (github) following with configurerating it and connecting our computers to the github server by creating our unique ssh keys. This was something we had a bit of struggles with but by looking at github's documentation on how to do it, the problem solved itself. Following that we aquinted ourselves with some typical git commands by testing them in our respective terminals. Such as git add, commit, pull, push, branch and checkout. add, commit is used to save our work on git, while pull and push is taking files from github and respectivly sending new updated work from our local devices. Branch checks what current branch we are on and checkout creates a new branch. As we were working we where pulling and pushing from the main branch all at the same time which resulted in problems such as delays and github acting strangly, therefore we quickly decided to create a developement branch from the main one and from it create our respective branches that we merge with the developement one later. What i believe to be a difficult aspect of this exercise is getting an understanding on all the tools and then putting them together into a functioning application. But I belive that little by little it will come together. My key strategy will most likly be familarising myself with one aspect of the program and working from there. Personally I might add that another diffuclity can be working together in a group and dividing the work between us as we all have different workflows and ways to go about problems. But at the same time I feel this is a reasurrance, since dividing up a program in pieces and distributing them between multiple individuals reducing the overwhealming feeling I have now. 

6/9 Ive begun by looking into some of the tools that we will be using for the assignment. As I believe familarising myself with them on atleast the surface level will give me a better vision of how the program will function as a whole. I mainly started with the containerization of the program and the tool I think we will use which is docker. It is something I have no experience or understanding of what it is and how it works (containers in general that is). After grasping a bit on how it works, by looking up explenations on youtube and reading about it on dockers website. I continued by downloaded docker to my terminal and created an image and ran a container from a tutorial on dockers website, including the test exercises that were provided in this course( I'd say it went alright). I feel there is alot ive not yet grasped and there is questions in my head about how to apply this and set it up for our project. I look forward to looking into it more.

7/9 Our group had another meeting to go through the "Get started points" and start planning. We created our "amazing" menu that we will provide for our humble customer. We followed by created a bit of a mind map, diagram with lucidchart to better visualise the different aspects of the program and how we think they relate to each other. To then decide what part each one of us want/should look into more, of course we all want and need an understanding in all the areas of the assignment. But its good to split the workload between us. Personally I wanted to continue looking into docker and container systems to start with. 

10/9 Today I looked into how to created a compose.yml file which is the blueprint of instructions for starting all the containers with the "docker compose" command (database, the kitchen view(decided on it being a python script) and the user interface). Looked into what instructions might be required to add for our application and its respectivce containers. Only added parts of it as I am still unsure if im doing it correctly or not, so will have to go back and re-check it when Ive acquired more insight. Wrote a prototype python script for sending and getting request from our webapplications, in other words, reciving and parseing the Json file with the order through a REST-api. I did this with a simple Get() funktion provided with the requests library of python. Which downloading that itself took some figuring out, as I accidentaly installed a bunch of libraries I did not want and the request library still did not want to work. Had to uninstalled the packages I got and looked up exactly how to download the individual library I wanted. After some trial and error got it working. Now what I am waiting for is getting the web application running (something my dear coworkers will look into) so I can test the python script (kitchenview part of the program)  

12/9 On todays laboration we went over the debugger and got to well.. debug a program that was kindly provided for us. I have had a bit of experience with this type of debugging previouslly both from our python course and before that. What mostly intruiged me was the tests that signaled something was wrong with the program. It something we read about in the recommended course book and it sparked a curiosity on how you write these test scripts. But the debugging went smoothly I did it in InteliJ an IDE I have not used before, but I found it easily understood and helpful. After the lesson our group took some time to go over what all of us had done while we merged our respective branches with the developement one and pulled the updated one to our local systems. We decided on ideal deadlines for the different parts and how much time we expect we need for them and wrote them down. The next step is to finish our respective parts and put them together and test them, to later do individual debug sessions, which after todays laboration is something I dont think we will have problems with.
Personally I will take time and read up on more parts of the project even if I am not neccesarly responsible for. 

17/9 Other than going to todays lecture, which I have to say was good for getting a clearer grasp on the assignment. It showed that the way I and my team had gone about the assignement was in the right direction. Nontheless I begun looking into Javascript and how to use frameworks like express. As well as connecting to our database which in this case was decided to be MongoDb, a NoSql(Not only Sql), which to my understanding is that you store data in a more unstructured way, which for example lets the data be updated and changed more rapidly. I understood it that one way of doing this is by using node.js (A term I hear be thrown around, but I dont yet know exactly what it is) and downloading packages for both express(to host the website locally) and the mongoose package to handle the database. From there using the mongoose set up a connection from the website to the database. I believe we have to then use the find() function and gathering the needed data and storing them in a array and afterwards have a for-loop add the data to list items <li></li>.

18/9
After todays lecture about documentation, I took a second to think about my conceptions on how to use comments and how Ive used them in the past. I fell into the catagory of over commenting everything, which now I see is definetly a bad practise. Although Ive used them mainly to explain my thought process to teachers reviewing my code, but it forms a bad habit. I could easily see the difference between self explanitory code and comments. Have now been forcing myself to take a while to think of how I could structure my code more readibly and mainly come up with better naming sense (which can be quite difficult). 

22/9 
Today I continued looking at the compse.yml file, added more instructions especially for running the kitchenView script. Made it so it wont start until the website has been launched, by using the "depends_on" keyword. I also started looking into networks with docker. There by thinking if it could be useful for our project. From what I understand the obvious benefit would be easy communication between the different containers. Although putting them all in a singel shared network creates some safty hazards and isnt good praxis, it would be better to create for example a network for frontend and one for backend, by doing so they are isolated from one another. But when thinking about it for our project, yes we could use it but it feels uneccesary, this because how the containers are setup. That is we have one container for each part rather then having divided it up like I mentioned with frontend backend and database containers instead. Because now the front and backend of our website gets launched from the same container. I may have understood it wrong, and I feel I would need to dive deeper into the topic.   